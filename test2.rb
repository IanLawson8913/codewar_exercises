# Write a method that takes a board (9 nested arrays) and returns a new board
# based on the board divided into 9 equal squares. Each square should be represented
# by a new nested array. See examples for a better idea of what I mean:

def find_squares(board)

end

p find_squares([[1, 1, 1, 2, 2, 2, 3, 3, 3], 
                [1, 1, 1, 2, 2, 2, 3, 3, 3],
                [1, 1, 1, 2, 2, 2, 3, 3, 3],
                [4, 4, 4, 5, 5, 5, 6, 6, 6],
                [4, 4, 4, 5, 5, 5, 6, 6, 6],
                [4, 4, 4, 5, 5, 5, 6, 6, 6],
                [7, 7, 7, 8, 8, 8, 9, 9, 9],
                [7, 7, 7, 8, 8, 8, 9, 9, 9],
                [7, 7, 7, 8, 8, 8, 9, 9, 9]])

# Returns:
# [[1, 1, 1, 1, 1, 1, 1, 1, 1], 
#  [2, 2, 2, 2, 2, 2, 2, 2, 2], 
#  [3, 3, 3, 3, 3, 3, 3, 3, 3], 
#  [4, 4, 4, 4, 4, 4, 4, 4, 4], 
#  [5, 5, 5, 5, 5, 5, 5, 5, 5], 
#  [6, 6, 6, 6, 6, 6, 6, 6, 6], 
#  [7, 7, 7, 7, 7, 7, 7, 7, 7], 
#  [8, 8, 8, 8, 8, 8, 8, 8, 8], 
#  [9, 9, 9, 9, 9, 9, 9, 9, 9]]

p find_squares([[5, 3, 4, 6, 7, 8, 9, 1, 2], 
                [6, 7, 2, 1, 9, 5, 3, 4, 8],
                [1, 9, 8, 3, 4, 2, 5, 6, 7],
                [8, 5, 9, 7, 6, 1, 4, 2, 3],
                [4, 2, 6, 8, 5, 3, 7, 9, 1],
                [7, 1, 3, 9, 2, 4, 8, 5, 6],
                [9, 6, 1, 5, 3, 7, 2, 8, 4],
                [2, 8, 7, 4, 1, 9, 6, 3, 5],
                [3, 4, 5, 2, 8, 6, 1, 7, 9]])

# Returns:                
# [[5, 3, 4, 6, 7, 2, 1, 9, 8], 
#  [6, 7, 8, 1, 9, 5, 3, 4, 2], 
#  [9, 1, 2, 3, 4, 8, 5, 6, 7], 
#  [8, 5, 9, 4, 2, 6, 7, 1, 3], 
#  [7, 6, 1, 8, 5, 3, 9, 2, 4], 
#  [4, 2, 3, 7, 9, 1, 8, 5, 6], 
#  [9, 6, 1, 2, 8, 7, 3, 4, 5], 
#  [5, 3, 7, 4, 1, 9, 2, 8, 6], 
#  [2, 8, 4, 6, 3, 5, 1, 7, 9]]
               

